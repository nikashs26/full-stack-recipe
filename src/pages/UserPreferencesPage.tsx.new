import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { loadUserPreferences, saveUserPreferences } from '../services/preferencesService';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Checkbox } from '@/components/ui/checkbox';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Loader2, Save, Info, Lock } from 'lucide-react';
import Header from '../components/Header';

// Form schema for validation
const formSchema = z.object({
  dietaryRestrictions: z.array(z.string()),
  favoriteCuisines: z.array(z.string()),
  favoriteFoods: z.array(z.string()),
  allergens: z.array(z.string()),
  cookingSkillLevel: z.enum(['beginner', 'intermediate', 'advanced']),
  healthGoals: z.array(z.string()).optional(),
  maxCookingTime: z.string().optional()
});

type FormValues = z.infer<typeof formSchema>;

// Available options for form fields
const dietaryOptions = [
  { id: 'vegetarian', label: 'Vegetarian', description: 'No meat or fish' },
  { id: 'vegan', label: 'Vegan', description: 'No animal products' },
  { id: 'gluten-free', label: 'Gluten Free', description: 'No wheat, barley, or rye' },
  { id: 'dairy-free', label: 'Dairy Free', description: 'No milk products' },
  { id: 'keto', label: 'Keto', description: 'Low carb, high fat' },
  { id: 'paleo', label: 'Paleo', description: 'No processed foods' }
];

const cuisineOptions = [
  { id: 'italian', label: 'Italian', description: 'Pasta, pizza, regional flavors' },
  { id: 'mexican', label: 'Mexican', description: 'Spicy, flavorful, corn and flour-based dishes' },
  { id: 'indian', label: 'Indian', description: 'Curry, aromatic spices, diverse flavors' },
  { id: 'chinese', label: 'Chinese', description: 'Stir-fry, rice, diverse regional cuisines' },
  { id: 'japanese', label: 'Japanese', description: 'Sushi, ramen, delicate flavors' },
  { id: 'thai', label: 'Thai', description: 'Sweet, sour, spicy balance' },
  { id: 'mediterranean', label: 'Mediterranean', description: 'Olive oil, fresh vegetables, seafood' },
  { id: 'french', label: 'French', description: 'Classic techniques, rich sauces' },
  { id: 'american', label: 'American', description: 'Comfort food, grilled dishes, fusion' }
];

const allergenOptions = [
  { id: 'nuts', label: 'Nuts', description: 'Tree nuts and peanuts' },
  { id: 'shellfish', label: 'Shellfish', description: 'Shrimp, crab, lobster' },
  { id: 'dairy', label: 'Dairy', description: 'Milk and milk products' },
  { id: 'eggs', label: 'Eggs', description: 'All egg products' },
  { id: 'soy', label: 'Soy', description: 'Soybeans and soy products' },
  { id: 'wheat', label: 'Wheat', description: 'Wheat and wheat products' }
];

const skillLevels = [
  { value: 'beginner', label: 'Beginner' },
  { value: 'intermediate', label: 'Intermediate' },
  { value: 'advanced', label: 'Advanced' }
];

const UserPreferencesPage = () => {
  const { isAuthenticated } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(true);
  const [hasChanges, setHasChanges] = useState(false);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      dietaryRestrictions: [],
      favoriteCuisines: [],
      favoriteFoods: ['', '', ''],
      allergens: [],
      cookingSkillLevel: 'beginner',
      healthGoals: [],
      maxCookingTime: '30 minutes'
    },
    mode: 'onChange'
  });

  const { control, watch, getValues, reset } = form;

  // Load user preferences on mount
  useEffect(() => {
    const loadPreferences = async () => {
      if (!isAuthenticated) return;
      
      try {
        const loadedPreferences = await loadUserPreferences();
        reset({
          dietaryRestrictions: loadedPreferences.dietaryRestrictions || [],
          favoriteCuisines: loadedPreferences.favoriteCuisines || [],
          favoriteFoods: loadedPreferences.favoriteFoods?.length 
            ? [...loadedPreferences.favoriteFoods, '', '', ''].slice(0, 3)
            : ['', '', ''],
          allergens: loadedPreferences.allergens || [],
          cookingSkillLevel: loadedPreferences.cookingSkillLevel || 'beginner',
          healthGoals: loadedPreferences.healthGoals || [],
          maxCookingTime: loadedPreferences.maxCookingTime || '30 minutes'
        });
      } catch (error) {
        console.error('Error loading preferences:', error);
        toast({
          title: 'Error',
          description: 'Failed to load preferences',
          variant: 'destructive',
        });
      } finally {
        setIsLoading(false);
      }
    };

    loadPreferences();
  }, [isAuthenticated, reset, toast]);

  // Auto-save effect
  useEffect(() => {
    if (!isAuthenticated || !hasChanges) return;

    const subscription = watch(() => {
      setHasChanges(true);
    });
    
    const timeoutId = setTimeout(async () => {
      const values = getValues();
      const isValid = await form.trigger();
      
      if (isValid) {
        try {
          await saveUserPreferences({
            ...values,
            favoriteFoods: values.favoriteFoods.filter(Boolean)
          });
          setHasChanges(false);
        } catch (error) {
          console.error('Error auto-saving preferences:', error);
        }
      }
    }, 2000);
    
    return () => {
      subscription.unsubscribe();
      clearTimeout(timeoutId);
    };
  }, [hasChanges, isAuthenticated, watch, getValues, form]);

  const onSubmit = async (data: FormValues) => {
    try {
      setIsLoading(true);
      const processedValues = {
        ...data,
        favoriteFoods: data.favoriteFoods.filter(Boolean)
      };
      
      await saveUserPreferences(processedValues);
      setHasChanges(false);
      
      toast({
        title: 'Success',
        description: 'Preferences saved successfully',
      });
    } catch (error) {
      console.error('Error saving preferences:', error);
      toast({
        title: 'Error',
        description: 'Failed to save preferences',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl text-center">Sign In Required</CardTitle>
            <CardDescription className="text-center">
              Please sign in to access your preferences
            </CardDescription>
          </CardHeader>
          <CardContent className="flex flex-col space-y-4">
            <Button asChild>
              <Link to="/signin">Sign In</Link>
            </Button>
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <span className="w-full border-t" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-background px-2 text-muted-foreground">
                  Or continue with
                </span>
              </div>
            </div>
            <Button variant="outline" asChild>
              <Link to="/signup">Create an account</Link>
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <main className="pt-24 md:pt-28">
        <div className="max-w-2xl mx-auto px-4 sm:px-6 py-12">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold">Your Recipe Preferences</h1>
            <p className="text-gray-500 mt-2">
              Tell us what you like, and we'll personalize your recipe recommendations
            </p>
            <div className="flex items-center justify-center mt-4 p-3 bg-blue-50 rounded-lg">
              <Info className="h-4 w-4 text-blue-600 mr-2" />
              <span className="text-sm text-blue-800">
                Your preferences are automatically saved as you make changes
              </span>
            </div>
          </div>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              {/* Dietary Restrictions */}
              <div className="space-y-4">
                <h2 className="text-lg font-medium">Dietary Restrictions</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {dietaryOptions.map((option) => (
                    <FormField
                      key={option.id}
                      control={control}
                      name="dietaryRestrictions"
                      render={({ field }) => (
                        <FormItem className="flex items-center space-x-2">
                          <Checkbox
                            id={option.id}
                            checked={field.value?.includes(option.id)}
                            onCheckedChange={(checked) => {
                              return checked
                                ? field.onChange([...field.value, option.id])
                                : field.onChange(
                                    field.value?.filter((value: string) => value !== option.id)
                                  )
                            }}
                          />
                          <FormLabel className="font-normal">
                            {option.label}
                            <p className="text-sm text-gray-500">{option.description}</p>
                          </FormLabel>
                        </FormItem>
                      )}
                    />
                  ))}
                </div>
              </div>

              {/* Favorite Cuisines */}
              <div className="space-y-4">
                <h2 className="text-lg font-medium">Favorite Cuisines</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {cuisineOptions.map((cuisine) => (
                    <FormField
                      key={cuisine.id}
                      control={control}
                      name="favoriteCuisines"
                      render={({ field }) => (
                        <FormItem className="flex items-center space-x-2">
                          <Checkbox
                            id={`cuisine-${cuisine.id}`}
                            checked={field.value?.includes(cuisine.id)}
                            onCheckedChange={(checked) => {
                              return checked
                                ? field.onChange([...field.value, cuisine.id])
                                : field.onChange(
                                    field.value?.filter((value: string) => value !== cuisine.id)
                                  )
                            }}
                          />
                          <FormLabel className="font-normal">
                            {cuisine.label}
                            <p className="text-sm text-gray-500">{cuisine.description}</p>
                          </FormLabel>
                        </FormItem>
                      )}
                    />
                  ))}
                </div>
              </div>

              {/* Allergens */}
              <div className="space-y-4">
                <h2 className="text-lg font-medium">Allergens to Avoid</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {allergenOptions.map((allergen) => (
                    <FormField
                      key={allergen.id}
                      control={control}
                      name="allergens"
                      render={({ field }) => (
                        <FormItem className="flex items-center space-x-2">
                          <Checkbox
                            id={`allergen-${allergen.id}`}
                            checked={field.value?.includes(allergen.id)}
                            onCheckedChange={(checked) => {
                              return checked
                                ? field.onChange([...field.value, allergen.id])
                                : field.onChange(
                                    field.value?.filter((value: string) => value !== allergen.id)
                                  )
                            }}
                          />
                          <FormLabel className="font-normal">
                            {allergen.label}
                            <p className="text-sm text-gray-500">{allergen.description}</p>
                          </FormLabel>
                        </FormItem>
                      )}
                    />
                  ))}
                </div>
              </div>

              {/* Cooking Skill Level */}
              <div className="space-y-4">
                <h2 className="text-lg font-medium">Cooking Skill Level</h2>
                <FormField
                  control={control}
                  name="cookingSkillLevel"
                  render={({ field }) => (
                    <FormItem>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger className="w-[200px]">
                            <SelectValue placeholder="Select your skill level" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {skillLevels.map((level) => (
                            <SelectItem key={level.value} value={level.value}>
                              {level.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </FormItem>
                  )}
                />
              </div>

              {/* Favorite Foods */}
              <div className="space-y-4">
                <h2 className="text-lg font-medium">Favorite Foods (up to 3)</h2>
                {[0, 1, 2].map((index) => (
                  <FormField
                    key={index}
                    control={control}
                    name={`favoriteFoods.${index}`}
                    render={({ field }) => (
                      <FormItem>
                        <FormControl>
                          <Input
                            placeholder={`Favorite food #${index + 1}`}
                            {...field}
                            value={field.value || ''}
                            className="w-full"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                ))}
              </div>

              <div className="flex justify-end space-x-4 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => reset()}
                  disabled={isLoading}
                >
                  Reset
                </Button>
                <Button type="submit" disabled={isLoading}>
                  {isLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Saving...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Save Preferences
                    </>
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </div>
      </main>
    </div>
  );
};

export default UserPreferencesPage;
